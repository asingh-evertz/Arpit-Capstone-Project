# DO NOT MODIFY - Autogenerated from products/eio/services/file-store-manager/openapi.yaml
openapi: 3.0.3
info:
  title: Capstone Project
  description: >-
    This project performs basic CRUD Operation
  version: 0.1.0
  contact:
    name: evertz.io
    url: https://support.evertz.io
    email: support@evertz.io
servers:
  - url: https://{region}.{environment}.evertz.io/{service}
    variables:
      region:
        default: us-east-1
        enum:
          - us-east-1
          - eu-west-1
          - ap-southeast-2
        description: >-
          The AWS region. See
          https://aws.amazon.com/about-aws/global-infrastructure/regions_az/.
          Data is persisted per-region, so data saved in one region will not be
          available in the other regions.
      environment:
        default: dev.api
        enum:
          - api
          - dev.api
          - test.api
        description: >-
          The environment. Data is persisted per-environment, so data saved in
          one environment will not be available in other environments.
      service:
        default: capstone-project
        description: The service base path
paths:
  /hello-world:
    get:
      operationId: getHelloWorld
      description: Get Hello World
      responses:
        '200':
          $ref: '#/components/responses/HelloWorldResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedErrorResponse'
      security:
        - BearerAuth: []
      tags:
        - Read
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        passthroughBehavior: when_no_match
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorld.Arn}:live/invocations
components:
  schemas:
    HttpStatusCode:
      type: string
      maxLength: 3
      minLength: 3
      pattern: ^\d{3}$
      example: '404'
    JsonApiErrorResponse:
      title: JSON:API Error Response
      description: A JSON:API-compliant error response
      type: object
      required:
        - errors
      properties:
        errors:
          description: An array of Error objects
          type: array
          minItems: 1
          items:
            description: A JSON:API-compliant error object
            type: object
            required:
              - status
              - title
            properties:
              id:
                description: >-
                  A unique identifier for this particular occurrence of the
                  problem
                type: string
                format: uuid
              status:
                $ref: '#/components/schemas/HttpStatusCode'
              code:
                description: An application-specific error code
                type: string
              title:
                description: >-
                  A short, human-readable summary of the problem that SHOULD NOT
                  change from occurrence to occurrence of the problem, except
                  for purposes of localization
                type: string
              detail:
                description: >-
                  A human-readable explanation specific to this occurrence of
                  the problem. Like title, this fieldâ€™s value can be localized
                type: string
              source:
                description: Contains references to the source of the error
                type: object
                properties:
                  pointer:
                    description: >-
                      a JSON Pointer [RFC6901] to the associated entity in the
                      request document
                    type: string
                  parameter:
                    description: indicates which URI query parameter caused the error
                    type: string
              meta:
                description: >-
                  a JSON meta object with non-standard meta-information about
                  the error
                type: object
                additionalProperties: true
  responses:
    HelloWorldResponse:
      description: OK
      content:
        application/vnd.api+json:
          schema:
            type: object
            properties:
              msg:
                type: string
            required:
              - msg
    401UnauthorizedErrorResponse:
      description: Unauthorized
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/JsonApiErrorResponse'
          example:
            errors:
              - id: dbd6c337-f335-4dd6-9eda-6ba9b0131028
                code: Unauthorized
                title: Unauthorized
                detail: Access denied. Please contact an administrator
                status: '401'
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |-
        When you authenticate with evertz.io a set of JSON Web Tokens are
        returned in the Response Body. When accessing HTTP Endpoints that
        require this authentication schema, the `Authorization` Header of the
        HTTP request must contain the `Id` Token that was issued
      x-amazon-apigateway-authtype: oauth2
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/authorization/authorizer/function:1}}/invocations
        authorizerCredentials: '{{resolve:ssm:/authorization/authorizer/role:1}}'
        authorizerResultTtlInSeconds: 0
  headers:
    Access-Control-Allow-Origin:
      description: CORS headers will be added when `Host` is a valid evertz.io domain
      schema:
        type: string
        enum:
          - evertz.io
tags:
  - name: Read
  - name: Modify
externalDocs:
  url: https://docs.evertz.tools/evertz-io/capstone-project/
x-amazon-apigateway-api-key-source: AUTHORIZER
x-amazon-apigateway-gateway-responses:
  RESOURCE_NOT_FOUND:
    statusCode: 404
    responseTemplates:
      application/vnd.api+json: |-
        {
          "errors": [
            {
              "id": "$context.requestId",
              "code": "$context.error.responseType",
              "detail": "$context.error.message",
              "status": "404"
            }
          ]
        }
  MISSING_AUTHENTICATION_TOKEN:
    statusCode: 401
    responseTemplates:
      application/vnd.api+json: |-
        {
          "errors": [
            {
              "id": "$context.requestId",
              "code": "$context.error.responseType",
              "detail": "$context.error.message",
              "status": "401"
            }
          ]
        }
  ACCESS_DENIED:
    statusCode: 403
    responseTemplates:
      application/vnd.api+json: |-
        {
          "errors": [
            {
              "id": "$context.requestId",
              "code": "$context.error.responseType",
              "detail": "$context.error.message",
              "status": "403"
            }
          ]
        }
  UNAUTHORIZED:
    statusCode: 401
    responseTemplates:
      application/vnd.api+json: |-
        {
          "errors": [
            {
              "id": "$context.requestId",
              "code": "$context.error.responseType",
              "detail": "$context.error.message",
              "status": "401"
            }
          ]
        }
  EXPIRED_TOKEN:
    statusCode: 401
    responseTemplates:
      application/vnd.api+json: |-
        {
          "errors": [
            {
              "id": "$context.requestId",
              "code": "$context.error.responseType",
              "detail": "$context.error.message",
              "status": "401"
            }
          ]
        }
  QUOTA_EXCEEDED:
    statusCode: 429
    responseTemplates:
      application/vnd.api+json: |-
        {
          "errors": [
            {
              "id": "$context.requestId",
              "code": "$context.error.responseType",
              "detail": "$context.error.message",
              "status": "429"
            }
          ]
        }
    THROTTLED:
      statusCode: 429
      responseTemplates:
        application/vnd.api+json: |-
          {
            "errors": [
              {
                "id": "$context.requestId",
                "code": "$context.error.responseType",
                "detail": "$context.error.message",
                "status": "429"
              }
            ]
          }
    DEFAULT_4XX:
      statusCode: 400
      responseTemplates:
        application/vnd.api+json: |-
          {
            "errors": [
              {
                "id": "$context.requestId",
                "code": "$context.error.responseType",
                "detail": "$context.error.message",
                "status": "400"
              }
            ]
          }
    DEFAULT_5XX:
      statusCode: 500
      responseTemplates:
        application/vnd.api+json: |-
          {
            "errors": [
              {
                "id": "$context.requestId",
                "code": "$context.error.responseType",
                "detail": "$context.error.message",
                "status": "500"
              }
            ]
          }
x-amazon-apigateway-request-validator: all
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true